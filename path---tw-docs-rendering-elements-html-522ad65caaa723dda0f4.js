webpackJsonp([0xbb7dd741c5f3],{935:function(n,s){n.exports={data:{markdownRemark:{html:'<p>Elements是React應用的最小單位, 表示了你想要顯示在螢幕上的東西：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>與瀏覽器的DOM elements不同之處在於, React elements只是一般的JavaScript objects, 創建的成本很低. 而React DOM則會負責將React elements更新到實際的DOM上面. 你可以想像成, React DOM會把React elements<strong>轉換</strong>成DOM elements並且顯示出來.</p>\n<blockquote>\n<p><strong>請注意</strong></p>\n<p>Reacet <code class="gatsby-code-text">elements</code> vs <code class="gatsby-code-text">components</code>是非常容易混淆的觀念, 不過你可以先這樣想: <strong>Elements是由components組成的</strong>, 至於詳細的介紹, 就等到<a href="/docs/components-and-props.html">接下來</a>再說了. </p>\n</blockquote>\n<h2 id="將react-element顯示到瀏覽器上"><a href="#%E5%B0%87react-element%E9%A1%AF%E7%A4%BA%E5%88%B0%E7%80%8F%E8%A6%BD%E5%99%A8%E4%B8%8A" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>將React element顯示到瀏覽器上</h2>\n<p>典型的React應用都會有一段下面這樣的HTML:</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-html"><code class="gatsby-code-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>我們會把上面這個div稱作React <strong>root</strong> DOM node(以下簡稱root DOM node), 他表示”所有在此之下的部分, 都是由React DOM來管理的”. 也就是說, 我們應該避免直接操作任何root DOM node之下的部分. </p>\n<p>Root DOM node並不一定要是唯一的, 但是他們彼此之間應<strong>獨立運作</strong>. 除此之外, 只要基於”root DOM node以及所以其之下的部分應該由React來管理”的原則, 技術上你也可以混用React與其他的JavaScript框架!</p>\n<p>透過React DOM以及root DOM node, 我們就可以把React element顯示在螢幕上了!</p>\n<p><div class="gatsby-highlight">\n        <pre class="gatsby-code-jsx"><code><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n        </div></p>\n<p><a href="/redirect-to-codepen/rendering-elements/render-an-element" target="_blank" rel="noreferrer">Try it on CodePen</a></p>\n<blockquote>\n<p><strong>(譯註) 複習一下</strong></p>\n<ol>\n<li>React elements並不是DOM elements, 他只是一個JavaScript object, 表示你想要顯示的UI</li>\n<li>React DOM負責把React elements轉為DOM elements, 並實際顯示到螢幕上</li>\n<li>我們需要選定一個實際的DOM node, 並把他的控制權交給React DOM, 這樣的一個DOM node稱作root DOM node </li>\n</ol>\n</blockquote>\n<h2 id="更新react-elements"><a href="#%E6%9B%B4%E6%96%B0react-elements" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>更新React elements</h2>\n<p>React elements是<a href="https://en.wikipedia.org/wiki/Immutable_object">不可變的</a>, 意思是當你創建了一個React element, 你就不能夠改變他的內容, 甚至包含了他的children部分. </p>\n<p>因為React elements不可變, 所以要更新UI只能夠透過:</p>\n<ol>\n<li>再次創建新的React element</li>\n<li>將這個新創建的React element交由<code class="gatsby-code-text">ReactDOM.render</code>重新顯示在螢幕上</li>\n</ol>\n<p>舉例來說, 如果我們想寫一個時鐘的程式, 並且我們希望他一秒更新一次, 那我們就需要每秒都創建一個新的React element, 並且呼叫<code class="gatsby-code-text">ReactDOM.render</code>把這個更新後的時鐘顯示出來: </p>\n<p><div class="gatsby-highlight">\n        <pre class="gatsby-code-jsx"><code><span class="token keyword">function</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="gatsby-highlight-code-line">  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span><span class="token punctuation">}</span>\n\n<span class="token function">setInterval</span><span class="token punctuation">(</span>tick<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n        </div></p>\n<p><a href="/redirect-to-codepen/rendering-elements/update-rendered-element" target="_blank" rel="noreferrer">Try it on CodePen</a></p>\n<blockquote>\n<p><strong>備註</strong></p>\n<p>實務上, 大部分的React應用都只會呼叫<code class="gatsby-code-text">ReactDOM.render</code>一次. 我們<a href="/docs/state-and-lifecycle.html">接下來</a>會介紹其他的方法來更新UI. 這些都是React的核心觀念, 千萬不可以跳過!</p>\n</blockquote>\n<h2 id="react-dom會避免無謂的更新"><a href="#react-dom%E6%9C%83%E9%81%BF%E5%85%8D%E7%84%A1%E8%AC%82%E7%9A%84%E6%9B%B4%E6%96%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React DOM會避免無謂的更新!</h2>\n<p>React DOM會比較目前等待更新的React elements和<code class="gatsby-code-text">前一版</code>的React elements的不同之處, 並且只更新必要的部分到實際的Browser DOM上面!</p>\n<p>這裡有個實驗可以證明這件事, 讓我們使用瀏覽器的除錯工具來觀察剛剛的時鐘程式:</p>\n<p><img src="/granular-dom-updates-c158617ed7cc0eac8f58330e49e48224.gif" alt="DOM inspector showing granular updates"></p>\n<p>從上圖我們可以看到, 雖然我們每秒都創建了新的React elements, 但僅僅只有<strong>時間相關的字串</strong>被更新了! </p>\n<p>這就是React的威力! 我們不需要在意<strong>如何改變UI(HOW)</strong>, 只需要在意<strong>UI最終變成怎樣(WHAT)</strong>就可以了, 有經驗的開發者會立刻感受到這樣的思維可以幫我們大幅縮短開發的時間, 並減少出錯的機會.</p>',frontmatter:{title:"顯示React Elements",next:"components-and-props.html",prev:"introducing-jsx.html"},fields:{path:"docs_tw/rendering-elements.md",slug:"tw/docs/rendering-elements.html"}}},pathContext:{slug:"tw/docs/rendering-elements.html"}}}});
//# sourceMappingURL=path---tw-docs-rendering-elements-html-522ad65caaa723dda0f4.js.map